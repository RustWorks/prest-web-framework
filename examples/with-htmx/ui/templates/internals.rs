use crate::ui::external_link::render as link;
pub fn render() -> maud::Markup {
    maud::html!(
        //(back_button("platforms"))
        ."highlight" {
            p{"The goal here was to compose a " b{"minimalitic full rust stack"}" that provides access to core web features and reasonable devex. The smallest rust packaging unit is called " b{"crate"}" and there are currently 5 of them:"}
            ol{
                li{b{"ui"}" is based on "(link("maud", "maud.lambda.xyz"))" for HTML templating, styled by "(link("Twind", "twind.style"))" classes and bundles custom typescript code for the pages. This combination is extremely simple, yet pretty powerful when combined with a service worker that can render on client side"}
                li{b{"sw"}" based on "(link("Web APIs", "developer.mozilla.org/en-US/docs/Web/API"))" which are available from both typescript and rust so you can use both ecosystems on the frontend"}
                li{b{"host"}" is based on "(link("tokio", "tokio.rs"))" stack for networking but currently uses it's "(link("temporary fork", "crates.io/crates/tokio_wasi"))" when compiling to wasm because "(link("wasi support is not yet stabilized", "github.com/tokio-rs/tokio/issues/4827"))" there"}
                li{b{"prest"}" is a collection of build utils to assemble other crates which is based on "(link("rust toolchain", "rust-lang.github.io/rustup/concepts/components.html"))", "(link("SWC", "swc.rs"))" for TS->JS transpiling and bundling, and "(link("wasm-bindgen", "rustwasm.github.io/wasm-bindgen/web-sys/index.html"))" to generate WASM-JS and Rust-TS bindings"}
                li{b{"prestapp"}" (root dir) is managing app's build process and contains an executable that can run standalone host, run it with a native webview based on "(link("WRY", "github.com/tauri-apps/wry"))" or just print instructions to containers. Both build script and executable are configured based on enabled features, targeted platforms and compilation profiles."}
            }
            p{"That's pretty much it and I think this composition hits pretty neat size/features balance. Most of the code either has comments next to it or becomes obvious once you read a bit about the used library, like maud templates which are basically just html but with a bit cleaner and rust-y-er syntax."}
            p{"There are a couple of ugly workarounds inside as well. One of them is typescript bundling + transpilation + minification in prest - I haven't figured out yet how to properly use the horde of SWC crates without all those custom settings. Another temporary problem - TLS(HTTPS) inside WASM is problematic while support for the required crypto primitives is WIP simultaniously in "(link("ring", "github.com/briansmith/ring/pull/1499"))" (most common rust crypto lib) and "(link("wasi-crypto", "github.com/WebAssembly/wasi-crypto"))", so for now I'm packing prestapp with an nginx TLS proxy for deployment."}
            p{"The whole thing with content, configs, utils and comments is "b{"<1k"}" LOC so it should not be too hard to get into all the details and become able to tweak anything. And in rust anything means "b{"really anything"}"! For example you can check out other templating engines like "(link("Askama", "github.com/djc/askama"))" or react-like frontend framework "(link("Yew", "yew.rs"))", try other BE frameworks like "(link("actix", "actix.rs"))" or "(link("rocket", "rocket.rs"))", and all the way down to changing the host async runtime to "(link("async-std", "github.com/async-rs/async-std"))" or "(link("smol", "github.com/smol-rs/smol"))" or even "(link("creating your own", "cfsamson.github.io/books-futures-explained/introduction.html"))"! Just like with C - anything programmable can be programmed in Rust, but also with much less pain."}
        }
        //(back_button("internals"))
    )
}